{"ast":null,"code":"var _jsxFileName = \"/Users/federico/CS Projects/full-stack-open2021/part5/blog-frontend/src/components/LoginForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux'; // SERVICES\n\nimport loginService from '../services/login';\nimport blogService from '../services/blogs';\nimport { setTheUser } from '../reducers/userReducer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LoginForm = () => {\n  _s();\n\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const dispatch = useDispatch();\n\n  const handleLogin = async event => {\n    event.preventDefault();\n\n    try {\n      const user = await loginService.login({\n        username,\n        password\n      });\n      window.localStorage.setItem('loggedBlogappUser', JSON.stringify(user));\n      blogService.setToken(user.token);\n      dispatch(setTheUser(user));\n      setUsername('');\n      setPassword('');\n    } catch (exception) {\n      dispatch(timedError('Wrong Credentials'));\n      setUsername('');\n      setPassword('');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"log in to application\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleLogin,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"username\", /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"username\",\n          type: \"text\",\n          value: username,\n          name: \"Username\",\n          onChange: _ref => {\n            let {\n              target\n            } = _ref;\n            return setUsername(target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"password\", /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"password\",\n          type: \"text\",\n          value: password,\n          name: \"Password\",\n          onChange: _ref2 => {\n            let {\n              target\n            } = _ref2;\n            return setPassword(target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LoginForm, \"2if1r6vstauAacdYWcokco+Nl8Q=\", false, function () {\n  return [useDispatch];\n});\n\n_c = LoginForm;\nLoginForm.propTypes = {\n  handleLogin: PropTypes.func.isRequired,\n  username: PropTypes.string.isRequired,\n  setUsername: PropTypes.func.isRequired,\n  password: PropTypes.string.isRequired,\n  setPassword: PropTypes.func.isRequired\n};\nexport default LoginForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"sources":["/Users/federico/CS Projects/full-stack-open2021/part5/blog-frontend/src/components/LoginForm.js"],"names":["React","useState","PropTypes","useDispatch","loginService","blogService","setTheUser","LoginForm","username","setUsername","password","setPassword","dispatch","handleLogin","event","preventDefault","user","login","window","localStorage","setItem","JSON","stringify","setToken","token","exception","timedError","target","value","propTypes","func","isRequired","string"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { useDispatch } from 'react-redux'\n\n// SERVICES\nimport loginService from '../services/login'\nimport blogService from '../services/blogs'\nimport { setTheUser } from '../reducers/userReducer'\n\n\nconst LoginForm = () => {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const dispatch = useDispatch()\n  \n  const handleLogin = async (event) => {\n    event.preventDefault()\n    try {\n      const user = await loginService.login({\n        username, password\n      })\n      window.localStorage.setItem(\n        'loggedBlogappUser', JSON.stringify(user)\n      )\n      blogService.setToken(user.token)\n      dispatch(setTheUser(user))\n      setUsername('')\n      setPassword('')\n\n    } catch (exception) {\n      dispatch(timedError('Wrong Credentials'))\n      setUsername('')\n      setPassword('')\n    }\n  }\n\n\n  return (\n    <div>\n      <h2>log in to application</h2>\n      <form onSubmit={handleLogin}>\n        <div>\n            username\n          <input\n            id='username'\n            type=\"text\"\n            value={username}\n            name=\"Username\"\n            onChange={({ target }) => setUsername(target.value)}\n          />\n        </div>\n        <div>\n            password\n          <input\n            id='password'\n            type=\"text\"\n            value={password}\n            name=\"Password\"\n            onChange={({ target }) => setPassword(target.value)}\n          />\n        </div>\n        <button type=\"submit\">login</button>\n      </form>\n    </div>\n  )\n}\n\nLoginForm.propTypes = {\n  handleLogin: PropTypes.func.isRequired,\n  username: PropTypes.string.isRequired,\n  setUsername: PropTypes.func.isRequired,\n  password: PropTypes.string.isRequired,\n  setPassword: PropTypes.func.isRequired,\n}\n\nexport default LoginForm\n"]},"metadata":{},"sourceType":"module"}