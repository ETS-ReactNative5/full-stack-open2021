{"ast":null,"code":"var _jsxFileName = \"/Users/federico/Documents/Education/Full Stack Open/full-stack-open2021/part5/blog-frontend/src/components/Togglable.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, forwardRef, useImperativeHandle } from 'react';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Togglable = /*#__PURE__*/_s( /*#__PURE__*/forwardRef(_c = _s((props, ref) => {\n  _s();\n\n  const [visible, setVisible] = useState(false);\n\n  const toggleVisibility = () => {\n    setVisible(!visible);\n  };\n\n  const hideWhenVisible = {\n    display: visible ? 'none' : ''\n  };\n  const showWhenVisible = {\n    display: visible ? '' : 'none'\n  };\n  useImperativeHandle(ref, () => {\n    return {\n      toggleVisibility\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: hideWhenVisible,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleVisibility,\n        children: props.buttonLabel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: showWhenVisible,\n      children: [props.children, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleVisibility,\n        children: \"cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n}, \"7Y5lBLdF9mkfoiy3F9Lk5HPUzvA=\")), \"7Y5lBLdF9mkfoiy3F9Lk5HPUzvA=\");\n\n_c2 = Togglable;\nTogglable.propTypes = {};\nexport default Togglable;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Togglable$forwardRef\");\n$RefreshReg$(_c2, \"Togglable\");","map":{"version":3,"sources":["/Users/federico/Documents/Education/Full Stack Open/full-stack-open2021/part5/blog-frontend/src/components/Togglable.js"],"names":["React","useState","forwardRef","useImperativeHandle","PropTypes","Togglable","props","ref","visible","setVisible","toggleVisibility","hideWhenVisible","display","showWhenVisible","buttonLabel","children","propTypes"],"mappings":";;;AAAA,SAASA,KAAT,EAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,mBAAtC,QAAiE,OAAjE;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;AAEA,MAAMC,SAAS,iCAAGH,UAAU,SAAC,CAACI,KAAD,EAAQC,GAAR,KAAgB;AAAA;;AACzC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,KAAD,CAAtC;;AAEA,QAAMS,gBAAgB,GAAG,MAAM;AAC3BD,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACH,GAFD;;AAGA,QAAMG,eAAe,GAAG;AAACC,IAAAA,OAAO,EAAEJ,OAAO,GAAG,MAAH,GAAY;AAA7B,GAAxB;AACA,QAAMK,eAAe,GAAG;AACpBD,IAAAA,OAAO,EAAEJ,OAAO,GAAG,EAAH,GAAQ;AADJ,GAAxB;AAIAL,EAAAA,mBAAmB,CAACI,GAAD,EAAM,MAAM;AAC3B,WAAO;AACHG,MAAAA;AADG,KAAP;AAGH,GAJkB,CAAnB;AAMA,sBACI;AAAA,4BACI;AAAK,MAAA,KAAK,EAAEC,eAAZ;AAAA,6BACI;AAAQ,QAAA,OAAO,EAAED,gBAAjB;AAAA,kBAAoCJ,KAAK,CAACQ;AAA1C;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAK,MAAA,KAAK,EAAED,eAAZ;AAAA,iBACKP,KAAK,CAACS,QADX,eAEI;AAAQ,QAAA,OAAO,EAAEL,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CA5B2B,kCAAb,iCAAf;;MAAML,S;AA8BNA,SAAS,CAACW,SAAV,GAAsB,EAAtB;AAIA,eAAeX,SAAf","sourcesContent":["import { React, useState, forwardRef, useImperativeHandle } from 'react'\nimport PropTypes from 'prop-types'\n\nconst Togglable = forwardRef((props, ref) => {\n    const [visible, setVisible] = useState(false)\n\n    const toggleVisibility = () => {\n        setVisible(!visible)\n    }\n    const hideWhenVisible = {display: visible ? 'none' : ''}\n    const showWhenVisible = {\n        display: visible ? '' : 'none'\n    }\n\n    useImperativeHandle(ref, () => {\n        return {\n            toggleVisibility\n        }\n    })\n\n    return (\n        <div>\n            <div style={hideWhenVisible}>\n                <button onClick={toggleVisibility}>{props.buttonLabel}</button>\n            </div>\n            <div style={showWhenVisible}>\n                {props.children}\n                <button onClick={toggleVisibility}>cancel</button>\n            </div>\n        </div>\n    )\n})\n\nTogglable.propTypes = {\n    \n}\n\nexport default Togglable"]},"metadata":{},"sourceType":"module"}